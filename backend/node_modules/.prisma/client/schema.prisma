// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  nomeCompleto    String    @map("nome_completo")
  telefone        String?
  cidade          String?
  estado          String?
  dataNascimento  DateTime? @map("data_nascimento")
  tipoUsuario     UserType  @default(MEMBRO) @map("tipo_usuario")
  ativo           Boolean   @default(true)
  emailVerificado Boolean   @default(false) @map("email_verificado")
  avatarUrl       String?   @map("avatar_url")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  familiares        Familiar[]
  premios           Premio[]
  motos             Moto[]
  participacoes     ParticipacaoEvento[]
  comboiosLiderados ComboioEvento[]      @relation("LiderComboio")

  @@map("usuarios")
}

model Familiar {
  id         String  @id @default(cuid())
  nome       String
  parentesco String
  idade      Int?
  telefone   String?

  // Relacionamentos
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("familiares")
}

model Premio {
  id        String  @id @default(cuid())
  titulo    String
  descricao String?
  categoria String
  ano       Int
  posicao   String?

  // Relacionamentos
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("premios")
}

model Moto {
  id         String  @id @default(cuid())
  marca      String
  modelo     String
  ano        Int
  cor        String
  cilindrada String
  placa      String?
  principal  Boolean @default(false)

  // Relacionamentos
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("motos")
}

model Evento {
  id                  String   @id @default(cuid())
  titulo              String
  descricao           String
  dataEvento          DateTime @map("data_evento")
  localEvento         String   @map("local_evento")
  endereco            String
  latitude            Float?
  longitude           Float?
  participantesMaximo Int?     @map("participantes_maximo")
  valorInscricao      Float?   @map("valor_inscricao")
  ativo               Boolean  @default(true)
  imagemUrl           String?  @map("imagem_url")

  // Relacionamentos
  participacoes ParticipacaoEvento[]
  comboios      ComboioEvento[]

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("eventos")
}

model ParticipacaoEvento {
  id              String    @id @default(cuid())
  confirmado      Boolean   @default(false)
  dataConfirmacao DateTime? @map("data_confirmacao")
  observacoes     String?

  // Relacionamentos
  userId   String @map("user_id")
  eventoId String @map("evento_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  evento   Evento @relation(fields: [eventoId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, eventoId])
  @@map("participacoes_eventos")
}

model ComboioEvento {
  id            String   @id @default(cuid())
  nome          String
  descricao     String?
  pontoEncontro String   @map("ponto_encontro")
  horarioSaida  DateTime @map("horario_saida")
  vagas         Int      @default(10)
  ativo         Boolean  @default(true)

  // Relacionamentos
  eventoId    String @map("evento_id")
  liderUserId String @map("lider_user_id")
  evento      Evento @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  lider       User   @relation("LiderComboio", fields: [liderUserId], references: [id])

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comboios_eventos")
}

enum UserType {
  ADMINISTRADOR
  DIRETOR
  MEMBRO
  VISITANTE
}
