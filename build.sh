#!/bin/bash

# Script de build para Tribo do Cerrado
echo "üèóÔ∏è  Iniciando build do Tribo do Cerrado..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "composer.json" ]; then
    echo "‚ùå Erro: composer.json n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

# Instalar depend√™ncias PHP
echo "üì¶ Instalando depend√™ncias PHP..."
if [ "$NODE_ENV" = "production" ]; then
    composer install --no-dev --optimize-autoloader --no-interaction
else
    composer install
fi

# Verificar se o Composer foi executado com sucesso
if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao instalar depend√™ncias PHP"
    exit 1
fi

# Instalar depend√™ncias Node.js (se necess√°rio)
if [ -f "package.json" ]; then
    echo "üì¶ Instalando depend√™ncias Node.js..."
    npm install
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao instalar depend√™ncias Node.js"
        exit 1
    fi
    
    # Build dos assets
    echo "üé® Compilando assets..."
    npm run build
fi

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p protected/runtime/logs
mkdir -p protected/runtime/cache
mkdir -p protected/runtime/mail
mkdir -p uploads/file
mkdir -p uploads/profile_image
mkdir -p assets

# Configurar permiss√µes
echo "üîê Configurando permiss√µes..."
chmod -R 755 .
chmod -R 777 protected/runtime
chmod -R 777 uploads
chmod -R 777 assets

# Criar arquivos .gitkeep para diret√≥rios vazios
touch uploads/.gitkeep
touch uploads/file/.gitkeep
touch uploads/profile_image/.gitkeep
touch assets/.gitkeep
touch protected/runtime/logs/.gitkeep
touch protected/runtime/cache/.gitkeep

# Verificar configura√ß√£o
echo "‚öôÔ∏è  Verificando configura√ß√£o..."

# Verificar se o arquivo de configura√ß√£o existe
if [ ! -f "protected/config/common.php" ]; then
    echo "‚ùå Erro: Arquivo de configura√ß√£o n√£o encontrado"
    exit 1
fi

# Verificar sintaxe PHP
echo "üêò Verificando sintaxe PHP..."
find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \; | grep -v "No syntax errors"

if [ ${PIPESTATUS[0]} -ne 0 ]; then
    echo "‚ùå Erro de sintaxe encontrado em arquivos PHP"
    exit 1
fi

# Verificar se as extens√µes PHP necess√°rias est√£o instaladas
echo "üîç Verificando extens√µes PHP..."
php -m | grep -E "(pdo|pgsql|mbstring|xml|zip|bcmath|intl|gd|curl)" > /dev/null

if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Algumas extens√µes PHP podem estar faltando"
fi

# Otimizar autoloader
echo "‚ö° Otimizando autoloader..."
composer dump-autoload --optimize

# Limpar cache se existir
if [ -d "protected/runtime/cache" ]; then
    echo "üßπ Limpando cache..."
    rm -rf protected/runtime/cache/*
fi

# Gerar informa√ß√µes de build
echo "üìã Gerando informa√ß√µes de build..."
cat > build-info.json << EOF
{
    "build_time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "build_number": "${BUILD_NUMBER:-local}",
    "git_commit": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')",
    "git_branch": "$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')",
    "php_version": "$(php -r 'echo PHP_VERSION;')",
    "environment": "${NODE_ENV:-development}",
    "project": "Tribo do Cerrado",
    "version": "1.0.0"
}
EOF

# Verificar sa√∫de b√°sica da aplica√ß√£o
echo "üè• Verificando sa√∫de da aplica√ß√£o..."
php -r "
try {
    require_once 'protected/config/common.php';
    echo 'Configura√ß√£o carregada com sucesso\n';
} catch (Exception \$e) {
    echo 'Erro ao carregar configura√ß√£o: ' . \$e->getMessage() . '\n';
    exit(1);
}
"

if [ $? -ne 0 ]; then
    echo "‚ùå Erro na verifica√ß√£o de sa√∫de"
    exit 1
fi

# Estat√≠sticas do build
echo ""
echo "üìä Estat√≠sticas do build:"
echo "   Arquivos PHP: $(find . -name "*.php" -not -path "./vendor/*" | wc -l)"
echo "   Tamanho vendor: $(du -sh vendor 2>/dev/null | cut -f1 || echo 'N/A')"
echo "   Tamanho total: $(du -sh . | cut -f1)"
echo ""

echo "‚úÖ Build conclu√≠do com sucesso!"
echo "üèçÔ∏è  Tribo do Cerrado est√° pronto para deploy!"

# Instru√ß√µes finais
echo ""
echo "üìù Pr√≥ximos passos:"
echo "   1. Configurar vari√°veis de ambiente no Render.com"
echo "   2. Fazer push para o reposit√≥rio GitHub"
echo "   3. Conectar reposit√≥rio ao Render.com"
echo "   4. Aguardar deploy autom√°tico"
echo ""
echo "üåê Vari√°veis de ambiente necess√°rias:"
echo "   - DATABASE_URL"
echo "   - COOKIE_VALIDATION_KEY"
echo "   - ADMIN_EMAIL"
echo "   - ADMIN_PASSWORD"
echo "   - MAILER_USERNAME"
echo "   - MAILER_PASSWORD"
echo ""

